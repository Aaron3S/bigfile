// Code generated by protoc-gen-go. DO NOT EDIT.
// source: image_convert.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// FileReadRequest represent the token delete request
type ImageConvertRequest struct {
	Token                string                `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	FileUid              string                `protobuf:"bytes,2,opt,name=file_uid,json=fileUid,proto3" json:"file_uid,omitempty"`
	Type                 string                `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Width                uint32                `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32                `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Left                 int32                 `protobuf:"varint,7,opt,name=left,proto3" json:"left,omitempty"`
	Top                  int32                 `protobuf:"varint,8,opt,name=top,proto3" json:"top,omitempty"`
	Secret               *wrappers.StringValue `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ImageConvertRequest) Reset()         { *m = ImageConvertRequest{} }
func (m *ImageConvertRequest) String() string { return proto.CompactTextString(m) }
func (*ImageConvertRequest) ProtoMessage()    {}
func (*ImageConvertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66265b5e936213c9, []int{0}
}

func (m *ImageConvertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageConvertRequest.Unmarshal(m, b)
}
func (m *ImageConvertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageConvertRequest.Marshal(b, m, deterministic)
}
func (m *ImageConvertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageConvertRequest.Merge(m, src)
}
func (m *ImageConvertRequest) XXX_Size() int {
	return xxx_messageInfo_ImageConvertRequest.Size(m)
}
func (m *ImageConvertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageConvertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageConvertRequest proto.InternalMessageInfo

func (m *ImageConvertRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ImageConvertRequest) GetFileUid() string {
	if m != nil {
		return m.FileUid
	}
	return ""
}

func (m *ImageConvertRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ImageConvertRequest) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ImageConvertRequest) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ImageConvertRequest) GetLeft() int32 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *ImageConvertRequest) GetTop() int32 {
	if m != nil {
		return m.Top
	}
	return 0
}

func (m *ImageConvertRequest) GetSecret() *wrappers.StringValue {
	if m != nil {
		return m.Secret
	}
	return nil
}

// FileReadResponse represent the token delete response
type ImageConvertResponse struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageConvertResponse) Reset()         { *m = ImageConvertResponse{} }
func (m *ImageConvertResponse) String() string { return proto.CompactTextString(m) }
func (*ImageConvertResponse) ProtoMessage()    {}
func (*ImageConvertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_66265b5e936213c9, []int{1}
}

func (m *ImageConvertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageConvertResponse.Unmarshal(m, b)
}
func (m *ImageConvertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageConvertResponse.Marshal(b, m, deterministic)
}
func (m *ImageConvertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageConvertResponse.Merge(m, src)
}
func (m *ImageConvertResponse) XXX_Size() int {
	return xxx_messageInfo_ImageConvertResponse.Size(m)
}
func (m *ImageConvertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageConvertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageConvertResponse proto.InternalMessageInfo

func (m *ImageConvertResponse) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*ImageConvertRequest)(nil), "bigfile.file_read.ImageConvertRequest")
	proto.RegisterType((*ImageConvertResponse)(nil), "bigfile.file_read.ImageConvertResponse")
}

func init() { proto.RegisterFile("image_convert.proto", fileDescriptor_66265b5e936213c9) }

var fileDescriptor_66265b5e936213c9 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0xcb, 0xae, 0xd3, 0x30,
	0x14, 0xc4, 0x7d, 0xa4, 0xc5, 0xb4, 0x12, 0xb8, 0x15, 0x32, 0x15, 0x2a, 0x51, 0x17, 0x90, 0x95,
	0x5b, 0x15, 0xbe, 0x20, 0x48, 0x48, 0x88, 0x4d, 0x64, 0x5e, 0x12, 0x9b, 0x2a, 0x8f, 0xd3, 0xc4,
	0x22, 0xb5, 0x8d, 0xe3, 0x50, 0xf5, 0x77, 0x58, 0xf2, 0x5d, 0x7c, 0x04, 0x4b, 0x14, 0x27, 0xa9,
	0x80, 0x7b, 0xa5, 0xbb, 0x49, 0xce, 0x8c, 0xe7, 0x8c, 0x3d, 0x83, 0x17, 0xe2, 0x14, 0xe7, 0x70,
	0x48, 0x95, 0xfc, 0x0e, 0xc6, 0x32, 0x6d, 0x94, 0x55, 0xe4, 0x51, 0x22, 0xf2, 0xa3, 0x28, 0x81,
	0x35, 0x9f, 0x83, 0x81, 0x38, 0x5b, 0xad, 0x73, 0xa5, 0xf2, 0x12, 0xb6, 0x4e, 0x90, 0xd4, 0xc7,
	0xed, 0xd9, 0xc4, 0x5a, 0x83, 0xa9, 0xda, 0x95, 0xcd, 0x2f, 0x84, 0x17, 0x6f, 0x1b, 0xab, 0xd7,
	0xad, 0x13, 0x87, 0x6f, 0x35, 0x54, 0x96, 0x2c, 0xf1, 0xd8, 0xaa, 0xaf, 0x20, 0x29, 0xf2, 0x51,
	0x70, 0x9f, 0xb7, 0x80, 0x3c, 0xc1, 0x53, 0x67, 0x5d, 0x8b, 0x8c, 0x0e, 0xdc, 0xc1, 0xa4, 0xc1,
	0x1f, 0x45, 0x46, 0x08, 0x1e, 0xd9, 0x8b, 0x06, 0x3a, 0x74, 0xb4, 0x9b, 0x1b, 0x93, 0xb3, 0xc8,
	0x6c, 0x41, 0xc7, 0x3e, 0x0a, 0xe6, 0xbc, 0x05, 0xe4, 0x31, 0xf6, 0x0a, 0x10, 0x79, 0x61, 0xa9,
	0xe7, 0xe8, 0x0e, 0x35, 0x0e, 0x25, 0x1c, 0x2d, 0x9d, 0xf8, 0x28, 0x18, 0x73, 0x37, 0x93, 0x87,
	0x78, 0x68, 0x95, 0xa6, 0x53, 0x47, 0x35, 0x23, 0x79, 0x85, 0xbd, 0x0a, 0x52, 0x03, 0x96, 0x8e,
	0x7c, 0x14, 0x3c, 0xd8, 0x3f, 0x65, 0x6d, 0x42, 0xd6, 0x27, 0x64, 0xef, 0xad, 0x11, 0x32, 0xff,
	0x14, 0x97, 0x35, 0xf0, 0x4e, 0xbb, 0xd9, 0xe1, 0xe5, 0xbf, 0x29, 0x2b, 0xad, 0x64, 0x05, 0x84,
	0xe2, 0x49, 0xaa, 0xa4, 0x05, 0x69, 0x5d, 0xd0, 0x19, 0xef, 0xe1, 0xbe, 0xc2, 0xb3, 0xbf, 0x37,
	0x48, 0xfa, 0x1f, 0x7e, 0xce, 0x6e, 0x94, 0xcd, 0x6e, 0x29, 0x72, 0xf5, 0xe2, 0x4e, 0x5d, 0xfb,
	0x94, 0xcd, 0xbd, 0x1d, 0x0a, 0x0d, 0x5e, 0xa6, 0xea, 0x74, 0xdd, 0xe8, 0x23, 0x85, 0xf3, 0x37,
	0xa2, 0x04, 0x0e, 0x71, 0x16, 0x35, 0x4c, 0x84, 0xbe, 0xac, 0x73, 0x61, 0x8b, 0x3a, 0x61, 0xa9,
	0x3a, 0x6d, 0x3b, 0xf5, 0xf5, 0x6f, 0x74, 0xfa, 0x1b, 0xa1, 0x1f, 0x83, 0x61, 0x18, 0xf1, 0x9f,
	0x83, 0x67, 0x61, 0x67, 0x16, 0xf5, 0xfd, 0x7c, 0x86, 0xb2, 0x7c, 0x27, 0xd5, 0x59, 0x7e, 0xb8,
	0x68, 0xa8, 0x12, 0xcf, 0xdd, 0xf2, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xa5, 0x2c,
	0xd6, 0x52, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageConvertClient is the client API for ImageConvert service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageConvertClient interface {
	ImageConvert(ctx context.Context, in *ImageConvertRequest, opts ...grpc.CallOption) (ImageConvert_ImageConvertClient, error)
}

type imageConvertClient struct {
	cc *grpc.ClientConn
}

func NewImageConvertClient(cc *grpc.ClientConn) ImageConvertClient {
	return &imageConvertClient{cc}
}

func (c *imageConvertClient) ImageConvert(ctx context.Context, in *ImageConvertRequest, opts ...grpc.CallOption) (ImageConvert_ImageConvertClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImageConvert_serviceDesc.Streams[0], "/bigfile.file_read.ImageConvert/ImageConvert", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageConvertImageConvertClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageConvert_ImageConvertClient interface {
	Recv() (*ImageConvertResponse, error)
	grpc.ClientStream
}

type imageConvertImageConvertClient struct {
	grpc.ClientStream
}

func (x *imageConvertImageConvertClient) Recv() (*ImageConvertResponse, error) {
	m := new(ImageConvertResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageConvertServer is the server API for ImageConvert service.
type ImageConvertServer interface {
	ImageConvert(*ImageConvertRequest, ImageConvert_ImageConvertServer) error
}

// UnimplementedImageConvertServer can be embedded to have forward compatible implementations.
type UnimplementedImageConvertServer struct {
}

func (*UnimplementedImageConvertServer) ImageConvert(req *ImageConvertRequest, srv ImageConvert_ImageConvertServer) error {
	return status.Errorf(codes.Unimplemented, "method ImageConvert not implemented")
}

func RegisterImageConvertServer(s *grpc.Server, srv ImageConvertServer) {
	s.RegisterService(&_ImageConvert_serviceDesc, srv)
}

func _ImageConvert_ImageConvert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImageConvertRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageConvertServer).ImageConvert(m, &imageConvertImageConvertServer{stream})
}

type ImageConvert_ImageConvertServer interface {
	Send(*ImageConvertResponse) error
	grpc.ServerStream
}

type imageConvertImageConvertServer struct {
	grpc.ServerStream
}

func (x *imageConvertImageConvertServer) Send(m *ImageConvertResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ImageConvert_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bigfile.file_read.ImageConvert",
	HandlerType: (*ImageConvertServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImageConvert",
			Handler:       _ImageConvert_ImageConvert_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "image_convert.proto",
}
